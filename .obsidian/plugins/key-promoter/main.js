/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
https://github.com/joethei/obsidian-key-promoter/
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    showUnassigned: true,
    showAssigned: true,
    threshold: 0,
    notificationTimeout: 5,
    template: "{{commandId}} - {{commandName}} - {{hotkey}}",
    descriptionOfActions: false,
    mouseStatistics: {},
    keyboardStatistics: {},
};
class KeyPromoterSettingsTab extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Key Promoter Settings' });
        new obsidian.Setting(containerEl)
            .setName('Show for assigned commands')
            .setDesc('show a notification for commands that do have a hotkey assigned')
            .addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.showAssigned)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showAssigned = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Show for unassigned commands')
            .setDesc('show a notification for commands that do not have a hotkey assigned')
            .addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.showUnassigned)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showUnassigned = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Threshold')
            .setDesc('Only show notification if there are less than X possible commands (use 0 to disable)')
            .addText(text => {
            text
                .setValue(String(this.plugin.settings.threshold))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (isNaN(Number(value)) || value === undefined) {
                    new obsidian.Notice("please specify a valid number");
                    return;
                }
                this.plugin.settings.threshold = Number(value);
                yield this.plugin.saveSettings();
            }));
        });
        const descriptionDesc = new DocumentFragment();
        descriptionDesc.createDiv().setText("Show name and Win/Mac shortcuts of any command you invoke");
        new obsidian.Setting(containerEl)
            .setName('Description of actions')
            .setDesc(descriptionDesc)
            .addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.descriptionOfActions)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.descriptionOfActions = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Notification timeout')
            .setDesc('show notifications for x seconds')
            .addText(text => {
            text
                .setValue(String(this.plugin.settings.notificationTimeout))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (isNaN(Number(value)) || value === undefined) {
                    new obsidian.Notice("please specify a valid number");
                    return;
                }
                this.plugin.settings.notificationTimeout = Number(value);
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Export template")
            .setDesc('Available variables are: {{commandId}}, {{commandName}}, {{hotkey}}')
            .addTextArea((textArea) => {
            textArea
                .setValue(this.plugin.settings.template)
                .setPlaceholder(DEFAULT_SETTINGS.template)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.template = value;
                yield this.plugin.saveSettings();
            }));
            textArea.inputEl.setAttr("rows", 8);
        });
    }
}

function around(obj, factories) {
    const removers = Object.keys(factories).map(key => around1(obj, key, factories[key]));
    return removers.length === 1 ? removers[0] : function () { removers.forEach(r => r()); };
}
function around1(obj, method, createWrapper) {
    const original = obj[method], hadOwn = obj.hasOwnProperty(method);
    let current = createWrapper(original);
    // Let our wrapper inherit static props from the wrapping method,
    // and the wrapping method, props from the original method
    if (original)
        Object.setPrototypeOf(current, original);
    Object.setPrototypeOf(wrapper, current);
    obj[method] = wrapper;
    // Return a callback to allow safe removal
    return remove;
    function wrapper(...args) {
        // If we have been deactivated and are no longer wrapped, remove ourselves
        if (current === original && obj[method] === wrapper)
            remove();
        return current.apply(this, args);
    }
    function remove() {
        // If no other patches, just do a direct removal
        if (obj[method] === wrapper) {
            if (hadOwn)
                obj[method] = original;
            else
                delete obj[method];
        }
        if (current === original)
            return;
        // Else pass future calls through, and remove wrapper from the prototype chain
        current = original;
        Object.setPrototypeOf(wrapper, original || Function);
    }
}
function dedupe(key, oldFn, newFn) {
    check[key] = key;
    return check;
    function check(...args) {
        return (oldFn[key] === key ? oldFn : newFn).apply(this, args);
    }
}

class StatisticsModal extends obsidian.Modal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    onOpen() {
        this.modalEl.addClass("key-promoter-modal");
        const { contentEl } = this;
        contentEl.empty();
        contentEl.createEl("h1", { text: "Most used commands" });
        const mouseStatistics = contentEl.createDiv("mouse");
        mouseStatistics.createEl("h2", { text: "Mouse" });
        const mouseTable = mouseStatistics.createEl("table");
        const mouseTableHeader = mouseTable.createTHead();
        mouseTableHeader.createEl("th", { text: "Usage Count" });
        mouseTableHeader.createEl("th", { text: "Command" });
        mouseTableHeader.createEl("th", { text: "Hotkey" });
        const mouseTableContent = mouseTable.createTBody();
        const mouseMap = new Map();
        Object.each(this.plugin.settings.mouseStatistics, (value, key) => {
            mouseMap.set(key, value);
        });
        mouseMap.forEach((value, key) => {
            //@ts-ignore
            const command = this.plugin.app.commands.findCommand(key);
            const tableRow = mouseTableContent.createEl("tr");
            tableRow.createEl("td", { text: String(value) });
            tableRow.createEl("td", { text: command.name });
            if (command.hotkeys) {
                let hotkeys = "";
                command.hotkeys.forEach((hotkey) => {
                    if (hotkey.modifiers) {
                        const modifiers = hotkey.modifiers.join("+")
                            .replace('Mod', obsidian.Platform.isMacOS ? 'Cmd' : 'Ctrl')
                            .replace("Meta", !obsidian.Platform.isMacOS ? "Win" : "Cmd");
                        hotkeys = hotkeys.concat(modifiers + " + " + hotkey.key);
                    }
                    else {
                        hotkeys = hotkeys.concat(hotkey.key);
                    }
                });
                tableRow.createEl("td", { text: hotkeys });
            }
            else
                tableRow.createEl("td");
        });
        const keyboardStatistics = contentEl.createDiv("keyboard");
        keyboardStatistics.createEl("h2", { text: "Keyboard" });
        const keyboardTable = keyboardStatistics.createEl("table");
        const keyboardTableHeader = keyboardTable.createTHead();
        keyboardTableHeader.createEl("th", { text: "Usage Count" });
        keyboardTableHeader.createEl("th", { text: "Command" });
        keyboardTableHeader.createEl("th", { text: "Hotkey" });
        const keyboardTableContent = keyboardTable.createTBody();
        const keyboardMap = new Map();
        Object.each(this.plugin.settings.keyboardStatistics, (value, key) => {
            keyboardMap.set(key, value);
        });
        keyboardMap.forEach((value, key) => {
            //@ts-ignore
            const command = this.plugin.app.commands.findCommand(key);
            const tableRow = keyboardTableContent.createEl("tr");
            tableRow.createEl("td", { text: String(value) });
            tableRow.createEl("td", { text: command.name });
            if (command.hotkeys) {
                let hotkeys = "";
                command.hotkeys.forEach((hotkey) => {
                    if (hotkey.modifiers) {
                        const modifiers = hotkey.modifiers.join("+")
                            .replace('Mod', obsidian.Platform.isMacOS ? 'Cmd' : 'Ctrl')
                            .replace("Meta", !obsidian.Platform.isMacOS ? "Win" : "Cmd");
                        hotkeys = hotkeys.concat(modifiers + " + " + hotkey.key);
                    }
                    else {
                        hotkeys = hotkeys.concat(hotkey.key);
                    }
                });
                tableRow.createEl("td", { text: hotkeys });
            }
            else
                tableRow.createEl("td");
        });
    }
    onClose() {
        super.onClose();
    }
}

class KeyPromoterPlugin extends obsidian.Plugin {
    hasParentSelector(el, clazz) {
        return Boolean(el.closest(clazz));
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin key promoter');
            yield this.loadSettings();
            //@ts-ignore
            this.uninstallCommand = around(this.app.commands, {
                executeCommandById(oldMethod) {
                    return dedupe("key-promoter", oldMethod, function (...args) {
                        const result = oldMethod && oldMethod.apply(this, args);
                        //@ts-ignore
                        const command = this.app.commands.findCommand(args[0]);
                        if (!command) {
                            return result;
                        }
                        //@ts-ignore
                        const keyPromoterPlugin = this.app.plugins.plugins["key-promoter"];
                        if (keyPromoterPlugin.settings.keyboardStatistics[command.id]) {
                            keyPromoterPlugin.settings.keyboardStatistics[command.id]++;
                        }
                        else {
                            keyPromoterPlugin.settings.keyboardStatistics[command.id] = 1;
                        }
                        keyPromoterPlugin.saveSettings();
                        if (!keyPromoterPlugin.settings.descriptionOfActions) {
                            return result;
                        }
                        const hotkeys = [];
                        if (command.hotkeys) {
                            command.hotkeys.forEach((hotkey) => {
                                let hotkeyDescription = "";
                                hotkeyDescription += hotkey.modifiers.map(modifier => {
                                    if (modifier === "Mod") {
                                        return "Ctrl/Cmd";
                                    }
                                    if (modifier === "Meta") {
                                        return "Win/Cmd";
                                    }
                                    return modifier;
                                }).join("+");
                                hotkeyDescription += "+" + hotkey.key;
                                hotkeys.push(hotkeyDescription);
                            });
                        }
                        const timeout = keyPromoterPlugin.settings.notificationTimeout;
                        new obsidian.Notice(command.name + " via " + hotkeys.join(), timeout * 1000);
                        return result;
                    });
                }
            });
            this.addSettingTab(new KeyPromoterSettingsTab(this));
            this.addCommand({
                id: "statistics",
                name: "Statistics",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    new StatisticsModal(this).open();
                })
            });
            this.addCommand({
                id: 'key-promoter',
                name: 'Export Hotkeys',
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    if (this.app.vault.getAbstractFileByPath("hotkeys-export.md")) {
                        new obsidian.Notice("there is already a exported file");
                        return;
                    }
                    //@ts-ignore
                    const commands = Object.values(this.app.commands.commands);
                    let content = "";
                    commands.forEach((command) => {
                        let hotkeys = "";
                        if (!command.hotkeys && !this.settings.showUnassigned) {
                            return;
                        }
                        if (command.hotkeys && !this.settings.showAssigned) {
                            return;
                        }
                        if (command.hotkeys) {
                            command.hotkeys.forEach((hotkey) => {
                                if (hotkey.modifiers) {
                                    const modifiers = hotkey.modifiers.join("+").replace('Mod', obsidian.Platform.isMacOS ? 'Cmd' : 'Ctrl');
                                    hotkeys = hotkeys.concat(modifiers + " + " + hotkey.key);
                                }
                                else {
                                    hotkeys = hotkeys.concat(hotkey.key);
                                }
                            });
                        }
                        if (hotkeys.length == 0) {
                            if (!this.settings.showUnassigned) {
                                return;
                            }
                            hotkeys = "No hotkey defined";
                        }
                        const singleCommand = this.settings.template
                            .replace('{{commandId}}', command.id)
                            .replace('{{commandName}}', command.name)
                            .replace('{{hotkey}}', hotkeys);
                        content = content.concat(singleCommand);
                    });
                    const file = yield this.app.vault.create(obsidian.normalizePath("hotkeys-export.md"), content);
                    yield this.app.workspace.activeLeaf.openFile(file, {
                        state: { mode: 'edit' },
                    });
                    new obsidian.Notice("exported hotkeys");
                })
            });
            this.registerDomEvent(document, 'click', (event) => {
                if (event.target == undefined)
                    return;
                //don't handle anything if there is nothing to show.
                //if(!this.settings.showAssigned && !this.settings.showUnassigned) return;
                //@ts-ignore
                let label = event.target.ariaLabel;
                //@ts-ignore
                if (!label)
                    label = event.target.innerText;
                if (!label)
                    return;
                const ignoredSelectors = [
                    ".mod-settings",
                    ".nav-files-container",
                    ".markdown-preview-view",
                    ".markdown-source-view",
                    ".cm-editor",
                    ".CodeMirror-line",
                    ".modal",
                    ".rss-feeds-folders"
                ];
                //don't show notifications when in settings, file explorer, etc.
                for (let ignoredSelector of ignoredSelectors) {
                    if (this.hasParentSelector(event.target, ignoredSelector))
                        return;
                }
                //@ts-ignore
                let commands = Object.values(this.app.commands.commands);
                commands = commands.filter((command) => {
                    /*
                    due to different capitalisation and different text content check for contains, not equals
                    i.e. the button named 'close' executes the command 'close active pane'
                     */
                    return command.name.toLowerCase().contains(label.toLowerCase());
                });
                if (this.settings.threshold != 0 && commands.length > this.settings.threshold) {
                    new obsidian.Notice("there are to many hotkeys that could fit the action named \"" + label + "\"");
                    return;
                }
                commands.forEach((command) => {
                    if (this.settings.mouseStatistics[command.id]) {
                        this.settings.mouseStatistics[command.id]++;
                    }
                    else {
                        this.settings.mouseStatistics[command.id] = 1;
                    }
                    this.saveSettings();
                    if (command.hotkeys == undefined) {
                        if (this.settings.showUnassigned) {
                            new obsidian.Notice("Hotkey for \"" + command.name + "\" is not set", this.settings.notificationTimeout * 1000);
                        }
                        return;
                    }
                    if (this.settings.showAssigned) {
                        command.hotkeys.forEach((hotkey) => {
                            const modifiers = hotkey.modifiers.join("+").replace('Mod', obsidian.Platform.isMacOS ? 'Cmd' : 'Ctrl');
                            new obsidian.Notice("Hotkey for \"" + command.name + "\" is \"" + modifiers + " + " + hotkey.key + "\"", this.settings.notificationTimeout * 1000);
                        });
                    }
                });
            });
        });
    }
    onunload() {
        if (this.uninstallCommand) {
            this.uninstallCommand();
        }
        console.log('unloading plugin key promoter');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            if (!this.settings.keyboardStatistics) {
                this.settings.keyboardStatistics = {};
            }
            if (!this.settings.mouseStatistics) {
                this.settings.mouseStatistics = {};
            }
            yield this.saveSettings();
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = KeyPromoterPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
